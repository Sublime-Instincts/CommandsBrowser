{
    "save": {
        "command_type": "text",
        "doc_string": "Saves the active document.",
        "args": [
            {
                "name": "async",
                "doc_string": "Whether to save the file asynchronously.",
                "type": "boolean"
            },
            {
                "name": "encoding",
                "doc_string": "The encoding, to save the file as.",
                "type": "string"
            },
            {
                "name": "quiet",
                "doc_string": null,
                "type": "boolean"
            }
        ],
        "type": "core"
    },
    "save_all": {
        "command_type": "window",
        "doc_string": "Save all the open documents in the active window.",
        "type": "core"
    },
    "save_macro": {
        "command_type": "window",
        "doc_string": "Save recorded macro to a file.",
        "type": "core"
    },
    "save_project_and_workspace_as": {
        "command_type": "window",
        "doc_string": "Opens the OS dialog window to save the active project.",
        "type": "core"
    },
    "save_workspace_as": {
        "command_type": "window",
        "doc_string": "Opens the OS dialog window to save the active workspace.",
        "type": "core"
    },
    "scroll_lines": {
        "command_type": "text",
        "doc_string": "Scroll the active view by the specified number of lines. A negative number means to scroll in an upwards direction.",
        "args": [
            {
                "name": "amount",
                "doc_string": "The specified amount by which the view has to be scrolled.",
                "type": "float"
            }
        ],
        "type": "core"
    },
    "select_all": {
        "command_type": "text",
        "doc_string": "Selects the entire contents of the document.",
        "type": "core"
    },
    "select_all_bookmarks": {
        "command_type": "text",
        "doc_string": "Select(s) all the bookmark(s) in the current document.",
        "type": "core"
    },
    "select_bookmark": {
        "command_type": "text",
        "doc_string": "Select a specific bookmark (by index) in the current document.",
        "args": [
            {
                "name": "index",
                "doc_string": null,
                "type": "int"
            }
        ],
        "type": "core"
    },
    "select_by_index": {
        "command_type": "window",
        "doc_string": "Focus a view in the active group based on its index.",
        "args": [
            {
                "name": "index",
                "doc_string": "The index of the view to focus. The first view will have an index of 0 and so on.",
                "type": "int"
            }
        ],
        "type": "core"
    },
    "select_lines": {
        "command_type": "text",
        "doc_string": "Select the current or next line, if the full current line is selected.",
        "args": [
            {
                "name": "forward",
                "doc_string": null,
                "type": "boolean"
            }
        ],
        "type": "core"
    },
    "set_build_system": {
        "command_type": "window",
        "doc_string": "Sets the given build system.",
        "args": [
            {
                "name": "file",
                "doc_string": "Accepts a Packages/ relative path to a sublime build file to set as the current build system. An empty string will set it to the Automatic option.",
                "type": "string"
            }
        ],
        "type": "core"
    },
    "set_layout": {
        "command_type": "window",
        "doc_string": "Sets the layout of the current window based on the structure specified in the args.",
        "args": [
            {
                "cols": [
                    0,
                    1
                ]
            },
            {
                "rows": [
                    0,
                    1
                ]
            },
            {
                "cells": [
                    [
                        0,
                        0,
                        1,
                        1
                    ]
                ]
            }
        ],
        "type": "core"
    },
    "set_file_type": {
        "command_type": "text",
        "doc_string": "Set the syntax for the view.",
        "args": [
            {
                "name": "syntax",
                "doc_string": "The syntax to be set for the view. Can either be a package relative path like 'Packages/Foo/Bar.sublime-syntax' or 'scope:' prefixed syntax names.",
                "type": "string"
            }
        ],
        "type": "core"
    },
    "set_line_ending": {
        "command_type": "text",
        "doc_string": "Set the line endings for the files.",
        "args": [
            {
                "name": "type",
                "doc_string": "The platform type. Valid values are 'windows', 'unix' & 'cr'.",
                "type": "string"
            }
        ],
        "type": "core"
    },
    "set_setting": {
        "command_type": "text",
        "doc_string": "Modifies a view setting.",
        "args": [
            {
                "name": "setting",
                "doc_string": "The name of the setting to be modified.",
                "type": "string"
            },
            {
                "name": "value",
                "doc_string": "The value of the setting.",
                "type": "any"
            }
        ],
        "type": "core"
    },
    "show_about_window": {
        "command_type": "application",
        "doc_string": "Displays the about dialog.",
        "type": "core"
    },
    "show_changelog": {
        "command_type": "application",
        "doc_string": "Displays the changelog dialog.",
        "type": "core"
    },
    "show_license_window": {
        "command_type": "application",
        "doc_string": "Displays the license dialog. This will only work if you are running an unregistered copy of Sublime Text.",
        "type": "core"
    },
    "show_overlay": {
        "command_type": "window",
        "doc_string": "Show the overlay from the argument.",
        "args": [
            {
                "name": "overlay",
                "doc_string": "The name of the overlay. Valid values are 'goto' & 'command_palette'.",
                "type": "string"
            },
            {
                "name": "text",
                "doc_string": "The initial text to put in the input widget of the overlay when it is invoked.",
                "type": "string"
            },
            {
                "name": "show_files",
                "doc_string": "Whether to show files in the overlay. Only makes sense when 'name' is set to 'goto'.",
                "type": "boolean"
            },
            {
                "name": "command",
                "doc_string": "The name of the command. Only makes sense when 'name' is set to 'command_palette'",
                "type": "string"
            },
            {
                "name": "args",
                "doc_string": "Arguments to be passed on to the command, if any.",
                "type": "string"
            }
        ],
        "type": "core"
    },
    "show_panel": {
        "command_type": "window",
        "doc_string": "Shows the panel from the argument.",
        "args": [
            {
                "name": "panel",
                "doc_string": "The name of the panel. Valid built in values are 'find', 'incremental_find', 'find_in_files', 'replace', 'console'. Any API created panels can also be opened.",
                "type": "string"
            },
            {
                "name": "toggle",
                "doc_string": "Whether to toggle the visibility of said panel.",
                "type": "boolean"
            },
            {
                "name": "reverse",
                "doc_string": "Whether to search the buffer for a given find text in a backwards manner.",
                "type": "boolean"
            },
            {
                "name": "regex",
                "doc_string": "Whether to activate the Regular Expression option.",
                "type": "boolean"
            },
            {
                "name": "case_sensitive",
                "doc_string": "Whether to activate the Case sensitive option.",
                "type": "boolean"
            },
            {
                "name": "whole_word",
                "doc_string": "Whether to activate the Whole word option.",
                "type": "boolean"
            },
            {
                "name": "wrap",
                "doc_string": "Whether to activate the Wrap option.",
                "type": "boolean"
            },
            {
                "name": "in_selection",
                "doc_string": "Whether to activate the In selection option.",
                "type": "boolean"
            },
            {
                "name": "highlight",
                "doc_string": "Whether to activate the Highlight matches option.",
                "type": "boolean"
            },
            {
                "name": "preserve_case",
                "doc_string": "Whether to activate the Preserve Case option.",
                "type": "boolean"
            },
            {
                "name": "show_context",
                "doc_string": "Whether to activate the Show Context option.",
                "type": "boolean"
            },
            {
                "name": "use_buffer",
                "doc_string": "Whether to activate the Use Buffer option.",
                "type": "boolean"
            },
            {
                "name": "use_gitignore",
                "doc_string": "Whether to activate the Use gitignore option.",
                "type": "boolean"
            },
            {
                "name": "where",
                "doc_string": "The text to be put in the 'Where' field of Find in Files panel. Only makes sense when the 'panel' equals 'find_in_files'.",
                "type": "string"
            }
        ],
        "type": "core"
    },
    "show_progress_window": {
        "command_type": "application",
        "doc_string": "Displays the indexing status dialog.",
        "added": 3128,
        "type": "core"
    },
    "single_selection": {
        "command_type": "text",
        "doc_string": "Switch to only the first selection.",
        "type": "core"
    },
    "slurp_find_string": {
        "command_type": "window",
        "doc_string": "Use the current selection as the find string.",
        "type": "core"
    },
    "slurp_replace_string": {
        "command_type": "window",
        "doc_string": "Use the current selection as the replacement string.",
        "type": "core"
    },
    "soft_redo": {
        "command_type": "text",
        "doc_string": "Redo's the last move or action, which has been undone.",
        "type": "core"
    },
    "soft_undo": {
        "command_type": "text",
        "doc_string": "Undo's the last move or action.",
        "type": "core"
    },
    "split_selection_into_lines": {
        "command_type": "text",
        "doc_string": "Splits each selection into individual lines.",
        "type": "core"
    },
    "sublime_merge_blame_file": {
        "command_type": "window",
        "doc_string": "Git Blame selected files with Sublime Merge.",
        "args": {
            "files": []
        },
        "added": 3181,
        "type": "core"
    },
    "sublime_merge_file_history": {
        "command_type": "window",
        "doc_string": "Show the history of the selected file in Sublime Merge",
        "args": {
            "files": []
        },
        "added": 3181,
        "type": "core"
    },
    "sublime_merge_folder_history": {
        "command_type": "window",
        "doc_string": "Show the history of the selected folder in Sublime Merge",
        "args": {
            "paths": []
        },
        "added": 3181,
        "type": "core"
    },
    "sublime_merge_line_history": {
        "command_type": "text",
        "doc_string": "Shows the history of the selected line(s) in Sublime Merge.",
        "added": 3181,
        "type": "core"
    },
    "sublime_merge_open_repo": {
        "command_type": "window",
        "doc_string": "Open the repository of the selected file/folder in Sublime Merge.",
        "args": [
            {
                "names": "paths",
                "doc_string": null,
                "type": "List<string>"
            }
        ],
        "added": 3181,
        "type": "core"
    },
    "swap_line_down": {
        "command_type": "text",
        "doc_string": "Moves each caret(s) line down by one.",
        "type": "core"
    },
    "swap_line_up": {
        "command_type": "text",
        "doc_string": "Moves each caret(s) line up by one.",
        "type": "core"
    },
    "select": {
        "command_type": "window",
        "doc_string": null,
        "added": 4082,
        "type": "core"
    },
    "set_mark": {
        "command_type": "text",
        "doc_string": null,
        "type": "default",
        "location": "Default/mark.py"
    },
    "swap_with_mark": {
        "command_type": "text",
        "doc_string": null,
        "type": "default",
        "location": "Default/mark.py"
    },
    "select_to_mark": {
        "command_type": "text",
        "doc_string": null,
        "type": "default",
        "location": "Default/mark.py"
    },
    "syntax_definition_compatability": {
        "command_type": "window",
        "doc_string": "Checks to see the syntax compatability of the currently active <b>.sublime-syntax</b> file. Any incompatible regex patterns (which doesn't conform to sregex) is shown in an output panel.",
        "type": "default",
        "location": "Default/run_syntax_tests.py"
    },
    "scroll_to_bof": {
        "command_type": "text",
        "doc_string": "Scrolls the file to show the beginning of the file.",
        "type": "default",
        "location": "Default/scroll.py"
    },
    "scroll_to_eof": {
        "command_type": "text",
        "doc_string": "Scrolls the file to show the end of the file.",
        "type": "default",
        "location": "Default/scroll.py"
    },
    "show_at_center": {
        "command_type": "text",
        "doc_string": "Scrolls the file to show the middle of the active viewport.",
        "type": "default",
        "location": "Default/scroll.py"
    },
    "show_scope_name": {
        "command_type": "text",
        "doc_string": "Shows the scope name(s) at the given cursor location, additionally giving the user the ability to copy the scope names.",
        "type": "default",
        "location": "Default/show_scope_name.py"
    },
    "sort_lines": {
        "command_type": "text",
        "doc_string": null,
        "args": [
            {
                "name": "case_sensitive",
                "doc_string": null,
                "type": "boolean"
            },
            {
                "name": "reverse",
                "doc_string": null,
                "type": "boolean"
            },
            {
                "name": "remove_duplicates",
                "doc_string": null,
                "type": "boolean"
            }
        ],
        "type": "default",
        "location": "Default/sort.py"
    },
    "sort_selection": {
        "command_type": "text",
        "doc_string": "Sorts the selection(s) in the current buffer.",
        "args": [
            {
                "name": "case_sensitive",
                "doc_string": "Whether to do a case sensitive sort.",
                "type": "boolean"
            },
            {
                "name": "reverse",
                "doc_string": null,
                "type": "boolean"
            },
            {
                "name": "remove_duplicates",
                "doc_string": "Whether to remove any duplicates while sorting.",
                "type": "boolean"
            }
        ],
        "type": "default",
        "location": "Default/sort.py"
    },
    "switch_file": {
        "command_type": "window",
        "doc_string": null,
        "args": [
            {
                "name": "extensions",
                "doc_string": null,
                "type": "List<string>"
            },
            {
                "name": "side_by_side",
                "doc_string": null,
                "type": "boolean"
            }
        ],
        "type": "default",
        "location": "Default/switch_file.py"
    },
    "swap_case": {
        "command_type": "text",
        "doc_string": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "type": "default",
        "location": "Default/transform.py"
    },
    "select_color_scheme": {
        "command_type": "window",
        "doc_string": "Sets the color scheme. If the arguments are not provided, opens a ListInputHandler for the user to choose.",
        "args": [
            {
                "name": "name",
                "doc_string": "The package specific path of the color scheme. If the value is 'auto', then a light and a dark variant needs to be specified.",
                "type": "string"
            },
            {
                "name": "light",
                "doc_string": "The package specific path of the color scheme that would be applied for OS light mode.",
                "type": "string"
            },
            {
                "name": "dark",
                "doc_string": "The package specific path of the color scheme that would be applied for OS dark mode.",
                "type": "string"
            }
        ],
        "type": "default",
        "location": "Default/ui.py"
    },
    "select_theme": {
        "command_type": "window",
        "doc_string": "Sets the theme. If the arguments are not provided, opens a ListInputHandler for the user to choose.",
        "args": [
            {
                "name": "name",
                "doc_string": "The package specific path of the theme. If the value is 'auto', then a light and a dark variant needs to be specified.",
                "type": "string"
            },
            {
                "name": "light",
                "doc_string": "The package specific path of the theme that would be applied for OS light mode.",
                "type": "string"
            },
            {
                "name": "dark",
                "doc_string": "The package specific path of the theme that would be applied for OS dark mode.",
                "type": "string"
            }
        ],
        "type": "default",
        "location": "Default/ui.py"
    },
    "set_max_columns": {
        "command_type": "window",
        "doc_string": "Readjusts the current layout to have atmost the specified columns.",
        "args": [
            {
                "name": "columns",
                "doc_string": "The number of columns to restrict the layout to.",
                "type": "int"
            }
        ],
        "type": "default",
        "location": "Default/pane.py"
    },
    "set_encoding": {
        "command_type": "text",
        "doc_string": null,
        "args": [
            {
                "name": "encoding",
                "doc_string": null,
                "type": "string"
            }
        ],
        "type": "core"
    },
    "select_to_left": {
        "command_type": "text",
        "doc_string": null,
        "type": "core",
        "added": 4097
    },
    "select_to_right": {
        "command_type": "text",
        "doc_string": null,
        "type": "core",
        "added": 4097
    }
}